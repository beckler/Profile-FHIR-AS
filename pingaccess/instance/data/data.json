{"version":"5.3.0.9","data":{"adminAuthBasic":{"enabled":true},"adminAuthWebSession":{"sessionPollIntervalInSeconds":10,"expirationWarningInMinutes":1,"idleTimeoutInMinutes":30,"sessionTimeoutInMinutes":240,"audience":"PingAccessUI","cookieDomain":null,"cookieType":"Encrypted"},"adminConfig":{"hostPort":"localhost:9090","httpProxyId":0,"httpsProxyId":0},"applications":[{"id":1,"enabled":true,"agentCacheInvalidatedResponseDuration":900,"agentCacheInvalidatedExpiration":1568996432689,"lastModified":1568995532689,"requireHTTPS":true,"name":"PingFed AS","description":"","manualOrderingEnabled":false,"resourceOrder":[],"applicationType":"Web","defaultAuthType":"Web","spaSupportEnabled":false,"destination":"Site","contextRoot":"/","realm":null,"caseSensitivePath":false,"webSessionId":0,"siteId":1,"agentId":0,"virtualHostIds":[3],"identityMappingIds":{"Web":0,"API":0},"accessValidatorId":0,"policy":{"Web":[{"type":"Rule","id":1}],"API":[]}}],"authTokenMgmt":{"keyRollEnabled":true,"keyRollPeriodInHours":24,"issuer":"PingAccessAuthToken","signingAlgorithm":"P-256"},"availabilityProfiles":[{"className":"com.pingidentity.pa.ha.availability.ondemand.OnDemandAvailabilityPlugin","id":1,"name":"Default Availability Profile","configuration":{"connectTimeout":10000,"pooledConnectionTimeout":-1,"readTimeout":-1,"maxRetries":2,"retryDelay":250,"failedRetryTimeout":60,"failureHttpStatusCodes":[]}}],"engineListeners":[{"id":2,"name":"Default Engine Listener","port":443,"secure":true,"trustedCertificateGroupId":0}],"httpHostSource":{"headerNameList":["X-Forwarded-Host","Host"],"listValueLocation":"LAST"},"httpIpSource":{"headerNameList":["X-Forwarded-For"],"listValueLocation":"LAST","fallbackToLastHopIp":true},"httpProtocolSource":{"headerName":"X-Forwarded-Proto"},"httpsListeners":[{"id":1,"name":"ADMIN","keyPairId":5,"useServerCipherSuiteOrder":true},{"id":2,"name":"AGENT","keyPairId":5,"useServerCipherSuiteOrder":true},{"id":3,"name":"ENGINE","keyPairId":5,"useServerCipherSuiteOrder":true}],"keyPairs":[{"id":2,"alias":"Generated: CONFIG QUERY","fileData":"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","password":{"encryptedValue":"OBF:JWE:eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2Iiwia2lkIjoiRzh3Zml0Y2t4RDNXNHl2VyJ9..sHtzvTSSqbHUxkVbSfzZUw.8xskdTFNgGCAWEKMdxmBJR44m_0zqHUPIMtSCxSDxZCqsFTaMa800-5yLb339KXS.VYigFr6WUq2EZa4Vgxb2Sg"}},{"id":5,"alias":"dev","fileData":"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","password":{"encryptedValue":"OBF:JWE:eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2Iiwia2lkIjoiRzh3Zml0Y2t4RDNXNHl2VyJ9..36oG0_yHtzpd0Sv0VXWfAw.1MTJOktz5XWun8wd8DbGktUicI_5nIXyDFtjjyhX-YN3V1UZdYXogK1tH5bwjwF8.Yhv4U3Jf9AuUdgNIV6J-TA"}}],"loadBalancingStrategies":[{"className":"com.pingidentity.pa.ha.lb.roundrobin.CookieBasedRoundRobinPlugin","id":2,"name":"Default Round Robin Strategy","configuration":{"stickySessionEnabled":true,"cookieName":"PA_S"}}],"oauthKeyMgmt":{"keyRollEnabled":true,"keyRollPeriodInHours":24},"pingFederate":{"targets":["pingfederate:9031"],"skipHostnameVerification":false,"expectedHostname":"","backChannelBasePath":null,"backChannelSecure":true,"useSlo":false,"host":"int-docker.cpricedomain.ping-eng.com","port":9031,"basePath":"","secure":true,"auditLevel":"OFF","trustedCertificateGroupId":3,"useProxy":false},"pingFederateAdmin":{"adminUsername":"access2federate","adminPassword":{"encryptedValue":"OBF:JWE:eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2Iiwia2lkIjoiRzh3Zml0Y2t4RDNXNHl2VyJ9..txbKs2cBUUDXe-co85e59g.j9XJz-5dIhoUDq0sV54g_A.ohkIoZ5-R_IaNcWcJWEDMA"},"host":"pingfederate","port":9999,"basePath":"","secure":true,"auditLevel":"OFF","trustedCertificateGroupId":3,"useProxy":false},"rejectionHandlers":[{"className":"com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin","id":1,"name":"Default Web Rejection Handler","configuration":{"responseCode":403,"templateFile":"policy.error.page.template.html","contentType":"HTML"}},{"className":"com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin","id":2,"name":"Default API Rejection Handler","configuration":{"responseCode":403,"templateFile":"oauth.error.json","contentType":"JSON"}},{"className":"com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin","id":3,"name":"Default Rate Limiting Rejection Handler","configuration":{"responseCode":429,"templateFile":"oauth.error.json","contentType":"JSON"}}],"reservedApplication":{"contextRoot":"/pa"},"resources":[{"id":1,"name":"Root Resource","methods":["*"],"pathPatterns":[{"pattern":"/*","type":"WILDCARD"}],"pathPrefixes":["/*"],"auditLevel":"ON","anonymous":false,"enabled":true,"unprotected":false,"policy":{"Web":[],"API":[]},"defaultAuthTypeOverride":null,"rootResource":true,"applicationId":1}],"rules":[{"className":"com.pingidentity.pa.policy.GroovyPolicyInterceptor","id":1,"name":"Add `patient` to Token Response","supportedDestinations":["Site","Agent"],"configuration":{"rejectionHandlingEnabled":true,"rejectionHandler":"1","errorResponseCode":403,"errorResponseStatusMsg":"Forbidden","errorResponseTemplateFile":"policy.error.page.template.html","errorResponseContentType":"text/html; charset=UTF-8","groovyScript":"import java.util.ArrayList\nimport java.util.Base64\nimport java.io.InputStream\nimport java.lang.StringBuffer\nimport java.io.BufferedReader\nimport javax.net.ssl.SSLContext;\nimport java.io.InputStreamReader\nimport com.fasterxml.jackson.core.JsonParser\nimport com.fasterxml.jackson.core.JsonFactory\nimport com.fasterxml.jackson.core.JsonToken\nimport org.apache.http.ssl.SSLContextBuilder;\nimport org.apache.http.ssl.SSLContexts;\nimport org.apache.http.conn.ssl.SSLConnectionSocketFactory;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.apache.http.HttpResponse;\ndef request = exc?.request;\ndef response = exc?.response;\ndef method = request?.method;\nif(!response)\n{\n  request?.header?.removeFields(\"Accept-Encoding\");\n}\nelse\n{\n    def responseHeader = response?.header;\n    def body = response?.getBody();\n    def bodyStr = \"\";\n    if(body != null)\n        bodyStr = new String(body.getContent());\n    def accessToken = \"eyJhbGciOiJIUzI1NiIsImtpZCI6InN5bSIsInBpLmF0bSI6ImVtNjgifQ.eyJzY29wZSI6Im9wZW5pZCBwcm9maWxlIiwiY2xpZW50X2lkIjoiUGluZ0xvZ29uIiwic3ViIjoiZmY5OWUxM2ItNmZmOC00MGVmLTljZTUtMWNjNWVmODkxZDNlIiwiZXhwIjoxNTY5MDAwMzAxfQ.kV0_JCHC8mXMSnYlMpzEmxpp9MLWQyd6xyjROsE-PkM\"\n  \n    if(accessToken)\n    {            \n      bodyStr = bodyStr.replace(\"}\",\",\\\"\" + getClaim() + \"\\\":\\\"\" + getValue(accessToken) + \"\\\"}\");\n      response?.setBodyContent(bodyStr.getBytes(\"UTF-8\"));\n      responseHeader?.removeContentEncoding(); \n      def bigIntContentLength = (bodyStr.getBytes(\"UTF-8\").length)/2;\n      // responseHeader?.setContentLength(bigIntContentLength);\n    }\n}\nanything();\nString getClaim()\n{\n    return \"patientId\";\n}\n\nString getValue(String accessToken)\n{\n    def sub = getAccessTokenClaim(accessToken, \"sub\");\n  \n    String username = \"cn=administrator\";\n    String password = \"2FederateM0re\";\n    \n    String encodedBasicAuth = Base64.getEncoder().encodeToString(String.format(\"%s:%s\", username, password).getBytes());\n    \n    String authHeader = \"Basic \" + encodedBasicAuth;\n    \n    String endpoint = \"https://int-docker.cpricelab.com:1443/consent/v1/consents?actor=\" + sub + \"&audience=AppleHealth\";\n    \n    String responseStr = getEndpointResponse(endpoint, \"GET\", authHeader);\n    \n    if(responseStr == null)\n        return \"no-value\";\n    else\n        return getClaimValue(responseStr, \"_embedded.consents[0].subject\");\n}\nString getAccessTokenClaim(String accessToken, String claim)\n{\n    def accessTokenSplit = accessToken.split(\"\\\\.\");\n    def accessTokenBodyEncoded = accessTokenSplit[1];\n    def accessTokenBody = new String(Base64.getDecoder().decode(accessTokenBodyEncoded));\n  \n    return getClaimValue(accessTokenBody, claim);\n}\nString getEndpointResponse(String endpoint, String method, String authHeader) {\n  SSLContextBuilder sslCtx = new SSLContextBuilder();\n  SSLContext sslCtxBuild = sslCtx.build();\n  SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslCtxBuild);\n  HttpClient client = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n  HttpRequestBase request = new HttpGet(endpoint);\n  request.addHeader(\"Authorization\", authHeader);\n  HttpResponse response = client.execute(request);\n  if (response == null) {\n    return null;\n  }\n  BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n  StringBuffer result = new StringBuffer();\n  String line = \"\";\n  while ((line = rd.readLine()) != null) {\n    result.append(line);\n  }\n  return result.toString();\n}\nString getClaimValue(String responseStr, String claimName)\n{\n    // Using the Jackson JSON library provided with PingAccess\n    // This library is subject change at any time and this\n    // script may error if it does.\n    JsonFactory factory = new JsonFactory();\n    JsonParser  parser  = factory.createParser(responseStr);\n    \n    // Iterating through each of the claims\n    while(!parser.isClosed()){\n      JsonToken jsonToken = parser.nextToken();\n      if(JsonToken.FIELD_NAME.equals(jsonToken))\n      {\n        def fieldName = parser.getCurrentName();\n          \n        jsonToken = parser.nextToken();\n        \n        if(!claimName.equals(fieldName))\n          continue;\n        \n        return parser.getValueAsString();\n      }\n      \n    }\n    \n    return null;\n}"}}],"sites":[{"id":1,"name":"PingFed","targets":["pingfederate:9031"],"secure":true,"trustedCertificateGroupId":2,"sendPaCookie":true,"useTargetHostHeader":false,"keepAliveTimeout":0,"maxConnections":-1,"maxWebSocketConnections":-1,"siteAuthenticatorIds":[],"skipHostnameVerification":false,"expectedHostname":null,"availabilityProfileId":1,"loadBalancingStrategyId":0,"useProxy":false}],"tokenProvider":{"useThirdParty":false,"type":"PingFederate"},"trustedCertGroups":[{"id":3,"name":"docker","useJavaTrustStore":true,"systemGroup":false,"ignoreAllCertificateErrors":false,"skipCertificateDateCheck":false,"certIds":[1]}],"trustedCerts":[{"id":1,"alias":"dev","fileData":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUY4akNDQTlxZ0F3SUJBZ0lFZFlEZWt6QU5CZ2txaGtpRzl3MEJBUXNGQURCaE1Rc3dDUVlEVlFRR0V3SjFjekVMTUFrR0ExVUUNCkNCTUNZMjh4RHpBTkJnTlZCQWNUQm1SbGJuWmxjakVWTUJNR0ExVUVDaE1NY0dsdVoybGtaVzUwYVhSNU1ROHdEUVlEVlFRTEV3WmsNCmIyTnJaWEl4RERBS0JnTlZCQU1UQTJSbGRqQWVGdzB4T1RBMU1ERXlNRFE0TURGYUZ3MHlPVEEwTWpneU1EUTRNREZhTUdFeEN6QUoNCkJnTlZCQVlUQW5Wek1Rc3dDUVlEVlFRSUV3SmpiekVQTUEwR0ExVUVCeE1HWkdWdWRtVnlNUlV3RXdZRFZRUUtFd3h3YVc1bmFXUmwNCmJuUnBkSGt4RHpBTkJnTlZCQXNUQm1SdlkydGxjakVNTUFvR0ExVUVBeE1EWkdWMk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0MNCkFnOEFNSUlDQ2dLQ0FnRUFqT25kK2p1R3pPelMvQ3Q4cW1maDZIUnhaZjg1NnlSMzlDdnE4cVkyWGE5SzFTcW5MUGhLSTJ5QmhxU2kNCkFoQ01laHAvRHRQdEFJaXgvNUVVZmwvUWxuOU1Ka3dGTkt5QTVUQ090SHVBWE5maGhSY0p2VCs4TDZaM0VsOGduQWE1S1A5b1BtVzkNCnJ4L1h4VHFNdURlTkFobkhmSGlZbHRHV3NxdUxmNlp1WjFYVnB6dzZmVkc2VnFXcDZnU0lNMEV0K0tmRTFXM3lDcnpCM2o3QkNITEUNCnRXRkZ0R1ZWMHpxLzNkTnBQWUJsblc4S2t4L0J3eGE2QThmV0N4RXNWOTQ1RDNQNFZHZXlWaUxSSVZLWFA2NVM5Nnd4ZE9iTXFiMk4NCis4K0VKdERxNmlZYUplWDMrYStiOG9yOFJ0MHZIRm83YXkrV3NLSVljZWlDUW5wTEcwQkRJb1pYQnhNVnc5OVpjN0x2dGRmaGpBRlcNCmhCNU9nSUN3bnJOdWJEdHYwKzd3dGNJUTlVeWpKWGVsOG0yNkI5bDRUV1o2MjV6M0dhM25GUitnNk5nVG9iclpEWG8wcFdncVNEd3kNClN6b1BDcVZPc3pUV25XMGxwU1Ezd2Jmc2RDTDVhdXN4UTRJNHludjdqclBLdXlYVHF0ZFIrSUJqMTJ4UGtzL3hyQzd5b1pXZGNwY3UNCmRrYkR4U3REK1VCeUM4QlYvOFpzZm9LSU8rSFhKM2drc0dOYUhGQ2YyZVIyZXVVT3cycWJDRGYxYnJYOEk3RU1KdFNJajd4YnpqajQNCmxhYk9DSFpxeWthQWozb3lpWk1TeGYxZ1FHUTJjSjBzWHRURERuQTVkaHI4bTVGT3FBbnNFUzdrbDRDL1cxbjArWXdxc2YrLzREclUNCmhzdUo2OFAweEhXSDA2TUNBd0VBQWFPQnNUQ0JyakNCakFZRFZSMFJCSUdFTUlHQmdncHdhVzVuWVdOalpYTnpnZzl3YVc1blpHRjANCllXTnZibk52YkdXQ0VuQnBibWRrWVhSaFoyOTJaWEp1WVc1alpZSU1jR2x1WjJSaGRHRnplVzVqZ2cxd2FXNW5aR2x5WldOMGIzSjUNCmdneHdhVzVuWm1Wa1pYSmhkR1dDRW5CcGJtZG1aV1JsY21GMFpTMWhaRzFwYm9JSmJHOWpZV3hvYjNOMGh3Ui9BQUFCTUIwR0ExVWQNCkRnUVdCQlFKemdsZ1p5N05zOWlHcnZXRTdOOVZZcGdXQWpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQVpFempuWFlQalJJRjB2VDUNCnZYaGRQUlN5L3pMamZVQWVZSkZTWENuUUh1ODVkS0N0SExtekdXMjQ5aGd4c2VjQW03MS9UMHFoKzMvWlA0UTNwL2doU3dWOHlsK0wNCjNpMWpPZlFhdXZUV0JzZkMwZWtvTDR2UXhKSUl5MTJkSWMyaXd6QlJJTklKVGhpSVZnWlUyYk41anRkc0REeGNPQlNlMzFTeUVhT0sNCk5VZS9FRXpacEhFekdQMURONWozNFlhcGRCM201dWtRZmc3WVpPR01vSTZCMWZ6OU1wVk4ySU5GZzJ6cXROZEpWSFVmUjQzQ3FsOTYNCnpDangvQVZFejJPMUFMeVd3KzNMZXFGeWo1Q1pVL1pWaXpwWFRFM0d3VmRRVlFnVkZPcndIS29HODcvRDhaSUpvQmI5MW4zNlZ4RXENCnFWRVIzSXgvVi90eW1jQi8xUzJ4Si9Gc2tTQUdZUHhTZFZQZUZTUTUzdzZCZGhxb09JK3ZOYUl0eGlucld1d2NXQVh1TC8yWmxneU0NCmk0all5dDRQMjRqcTR1MExHK2RITWZ5bXlVNXoweFZpQzFKN2xkN0kzK1QzaUIvODJNMGN5UWtIMkY2Y0ptU3JnWjdwS1lDcFpXYnYNCjZ3R3ZGdzFnaUtHa1VERFhKT0E5NTBmSzY2cUZFSmdXb3RoV3J6SFRuZ1RMSHZZakpZOUZiMElocjRWb3VLOG1WdTBLYmxUY2x3eVoNCjYzSnF4QWRJdGpTb282VVVHMmZxaDh6UnU0U1ozS2l1WVRhdUN3VGRaZm5hOXozZWZPN0R4OWN3T1lsMUMvRGtNQTlQR3RMUzltL2oNCkQ4SU5CcUV2bEgwWDJNUE1ZL2ZYZ0RQWGVsVTlMSzhpK1pnYW9sOGdWR3d2U1QvR1Z0a25oZVJZVWgwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"},{"id":3,"alias":"PingDirectory","fileData":"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNyRENDQVpRQ0NRQ2RvVk9sRThKMHJUQU5CZ2txaGtpRzl3MEJBUXNGQURBWU1SWXdGQVlEVlFRRERBMXdhVzVuWkdseVpXTjANCmIzSjVNQjRYRFRFNU1Ea3hPVEF3TURJME0xb1hEVEl3TURreE9EQXdNREkwTTFvd0dERVdNQlFHQTFVRUF3d05jR2x1WjJScGNtVmoNCmRHOXllVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMcEpzT2xYemtPVm9ITlVrVjJ0M1E1NjFwZWINCnV0UXo2NkQ1S3VrcGtEcUFjVXl2YnZ6SmQvclh4QzJLYkZMUzNlYTF1dWRRdjI5ZkFUR3grTFpHZUtSN1o3anEzWU9WWnRuV1B2SncNCmlJUkVVQVE0MUtyWjBicjVVdU1jVUJyS1VhbjlhSFdVU2xQdk1OSXdrR1NKV2huK2M1NGNGa0xpT0ZSR094SVFOR0toQXFQZG1HU0YNClJSVUI5aWd6K2hQWjdGaklZek5RVm1qYytyY0swSEwxYUd2RlJka2c5UUdqK2xiUE9zM2QxTFJQTFlQYmdPNkwwd2RlZ1M3b1hRQ3oNCk9XaXpHYUxYV2hBeUllK2doQTlpb3hHNE1KWXdJcmVDcDdrN1JnVUtVcGtFa0pIWlJQRnVKWEJTeW1hZDNvcENzQmJldE9uV2E3ZloNCmJaTy83OGVnUUZjQ0F3RUFBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBVTlkSHp2NHluWXdVNXJBUTBFM29IeXhac1gzMlhUbXMNCk1hRnJHUWVzaVdIKzhYV0N4dGZMRlh4VWtnSXlaaVdxdmZwVDFQMk83NnI4TlRZNHY0Z0xiRGM0SDYrbXFHNS9GWmszWHVxWGVDY1ENCjBXZVFhRWk1MzE2ekx6NEZMUUozc2IyZEpST0V1aTkzbGJmZXA0UUtJcnhadkhMODB1eG9lcHh6amU1Wm9aTlFSeG4xOVozb3FrN0ENCnZmTTZDNjM1OWNWVEZINllDL2pZTDArZy9nMTA3VXNLZnVMMUcrMkFtSVFpRUpuQmdxMkdkMXpnQUxBdWRha2Fuam40ZndCamR5RVgNClJ1ak80NDE5bkpUK2hSNWVvVTBNUjVTYng2Z0cyRFY2QlZBYlJIL210aS9xN2RSNVlQZFI3VW95Z2M3dHpSL3dFMWJESW1PNTVGWjgNCkRjRGU3dz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="}],"unknownResources":{"errorStatusCode":403,"errorTemplateFile":"general.error.page.template.html","errorContentType":"HTML","agentDefaultMode":"DENY","agentDefaultCacheTTL":900,"auditLevel":"OFF"},"virtualHosts":[{"id":3,"host":"*","port":443,"agentResourceCacheTTL":900,"keyPairId":0,"trustedCertificateGroupId":0}],"webSessionMgmt":{"keyRollEnabled":true,"keyRollPeriodInHours":24,"issuer":"PingAccess","signingAlgorithm":"P-256","cookieName":"PA","sessionStateCookieName":"PA_STATE","updateTokenWindowInSeconds":60,"encryptionAlgorithm":"A128CBC-HS256","nonceCookieTimeToLiveInMinutes":5}}}