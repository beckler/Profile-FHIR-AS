{
    "version": "5.3.0.9",
    "data": {
        "adminAuthBasic": {
            "enabled": true
        },
        "adminAuthWebSession": {
            "sessionPollIntervalInSeconds": 10,
            "expirationWarningInMinutes": 1,
            "idleTimeoutInMinutes": 30,
            "sessionTimeoutInMinutes": 240,
            "audience": "PingAccessUI",
            "cookieDomain": null,
            "cookieType": "Encrypted"
        },
        "adminConfig": {
            "hostPort": "localhost:9090",
            "httpProxyId": 0,
            "httpsProxyId": 0
        },
        "applications": [
            {
                "id": 1,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "agentCacheInvalidatedExpiration": 1569025973090,
                "lastModified": 1569025073090,
                "requireHTTPS": true,
                "name": "PingFed AS",
                "description": "",
                "manualOrderingEnabled": false,
                "resourceOrder": [],
                "applicationType": "Web",
                "defaultAuthType": "Web",
                "spaSupportEnabled": false,
                "destination": "Site",
                "contextRoot": "/",
                "realm": null,
                "caseSensitivePath": false,
                "webSessionId": 0,
                "siteId": 1,
                "agentId": 0,
                "virtualHostIds": [
                    3
                ],
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "accessValidatorId": 0,
                "policy": {
                    "Web": [],
                    "API": []
                }
            }
        ],
        "authTokenMgmt": {
            "keyRollEnabled": true,
            "keyRollPeriodInHours": 24,
            "issuer": "PingAccessAuthToken",
            "signingAlgorithm": "P-256"
        },
        "availabilityProfiles": [
            {
                "className": "com.pingidentity.pa.ha.availability.ondemand.OnDemandAvailabilityPlugin",
                "id": 1,
                "name": "Default Availability Profile",
                "configuration": {
                    "connectTimeout": 10000,
                    "pooledConnectionTimeout": -1,
                    "readTimeout": -1,
                    "maxRetries": 2,
                    "retryDelay": 250,
                    "failedRetryTimeout": 60,
                    "failureHttpStatusCodes": []
                }
            }
        ],
        "engineListeners": [
            {
                "id": 2,
                "name": "Default Engine Listener",
                "port": 443,
                "secure": true,
                "trustedCertificateGroupId": 0
            }
        ],
        "httpHostSource": {
            "headerNameList": [
                "X-Forwarded-Host",
                "Host"
            ],
            "listValueLocation": "LAST"
        },
        "httpIpSource": {
            "headerNameList": [
                "X-Forwarded-For"
            ],
            "listValueLocation": "LAST",
            "fallbackToLastHopIp": true
        },
        "httpProtocolSource": {
            "headerName": "X-Forwarded-Proto"
        },
        "httpsListeners": [
            {
                "id": 1,
                "name": "ADMIN",
                "keyPairId": 5,
                "useServerCipherSuiteOrder": true
            },
            {
                "id": 2,
                "name": "AGENT",
                "keyPairId": 5,
                "useServerCipherSuiteOrder": true
            },
            {
                "id": 3,
                "name": "ENGINE",
                "keyPairId": 5,
                "useServerCipherSuiteOrder": true
            }
        ],
        "keyPairs": [
            {
                "id": 2,
                "alias": "Generated: CONFIG QUERY",
                "fileData": "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",
                "password": {
                    "encryptedValue": "OBF:JWE:eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2Iiwia2lkIjoiRzh3Zml0Y2t4RDNXNHl2VyJ9..N29zRNfTvag_VzKLfkTgPA.j3fx_pdSbbYyqnZdTQyz1OqK2BIx5j4Ax49x_MWZJXxR5A2iWkjx1W-M3xjwS393.orDZKqtTLIdwSTdjQpvHeA"
                }
            },
            {
                "id": 5,
                "alias": "dev",
                "fileData": "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",
                "password": {
                    "encryptedValue": "OBF:JWE:eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2Iiwia2lkIjoiRzh3Zml0Y2t4RDNXNHl2VyJ9..dUlQaszPx1UF1J13rYjVeA.5CUUdcCcOeQkAue-ZFmxq6cKLjXdCX_SCyF33B7smFxszoe9nIYbUkYrNjoh9wDK.jx09aA07hqUt5yIrfdo41Q"
                }
            }
        ],
        "loadBalancingStrategies": [
            {
                "className": "com.pingidentity.pa.ha.lb.roundrobin.CookieBasedRoundRobinPlugin",
                "id": 2,
                "name": "Default Round Robin Strategy",
                "configuration": {
                    "stickySessionEnabled": true,
                    "cookieName": "PA_S"
                }
            }
        ],
        "oauthKeyMgmt": {
            "keyRollEnabled": true,
            "keyRollPeriodInHours": 24
        },
        "pingFederate": {
            "targets": [
                "pingfederate:9031"
            ],
            "skipHostnameVerification": false,
            "expectedHostname": "",
            "backChannelBasePath": null,
            "backChannelSecure": true,
            "useSlo": false,
            "host": "int-docker.cpricedomain.ping-eng.com",
            "port": 9031,
            "basePath": "",
            "auditLevel": "OFF",
            "secure": true,
            "trustedCertificateGroupId": 3,
            "useProxy": false
        },
        "pingFederateAdmin": {
            "adminUsername": "access2federate",
            "adminPassword": {
                "encryptedValue": "OBF:JWE:eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2Iiwia2lkIjoiRzh3Zml0Y2t4RDNXNHl2VyJ9..Kl-6bk_1ryazlTHXs7tl9Q.gOYLnVquVEwsykj-VmmEPg.trViIIfSMbv9I1bwNB7hOw"
            },
            "host": "pingfederate",
            "port": 9999,
            "basePath": "",
            "auditLevel": "OFF",
            "secure": true,
            "trustedCertificateGroupId": 3,
            "useProxy": false
        },
        "rejectionHandlers": [
            {
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 1,
                "name": "Default Web Rejection Handler",
                "configuration": {
                    "responseCode": 403,
                    "templateFile": "policy.error.page.template.html",
                    "contentType": "HTML"
                }
            },
            {
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 2,
                "name": "Default API Rejection Handler",
                "configuration": {
                    "responseCode": 403,
                    "templateFile": "oauth.error.json",
                    "contentType": "JSON"
                }
            },
            {
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 3,
                "name": "Default Rate Limiting Rejection Handler",
                "configuration": {
                    "responseCode": 429,
                    "templateFile": "oauth.error.json",
                    "contentType": "JSON"
                }
            }
        ],
        "reservedApplication": {
            "contextRoot": "/pa"
        },
        "resources": [
            {
                "id": 1,
                "name": "Root Resource",
                "methods": [
                    "*"
                ],
                "pathPatterns": [
                    {
                        "pattern": "/*",
                        "type": "WILDCARD"
                    }
                ],
                "pathPrefixes": [
                    "/*"
                ],
                "auditLevel": "ON",
                "anonymous": false,
                "enabled": true,
                "unprotected": false,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "defaultAuthTypeOverride": null,
                "rootResource": true,
                "applicationId": 1
            },
            {
                "id": 2,
                "name": "Token Endpoint",
                "methods": [
                    "*"
                ],
                "pathPatterns": [
                    {
                        "pattern": "/as/token.oauth2",
                        "type": "WILDCARD"
                    }
                ],
                "pathPrefixes": [
                    "/as/token.oauth2"
                ],
                "auditLevel": "OFF",
                "anonymous": false,
                "enabled": true,
                "unprotected": false,
                "policy": {
                    "Web": [
                        {
                            "type": "Rule",
                            "id": 1
                        }
                    ],
                    "API": []
                },
                "defaultAuthTypeOverride": "Web",
                "rootResource": false,
                "applicationId": 1
            }
        ],
        "rules": [
            {
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 1,
                "name": "Add `patient` to Token Response",
                "supportedDestinations": [
                    "Site",
                    "Agent"
                ],
                "configuration": {
                    "rejectionHandlingEnabled": true,
                    "rejectionHandler": "1",
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import java.util.ArrayList\nimport java.util.Base64\nimport java.io.InputStream\nimport java.lang.StringBuffer\nimport java.io.BufferedReader\nimport javax.net.ssl.SSLContext;\nimport java.io.InputStreamReader;\nimport com.fasterxml.jackson.databind.JsonNode\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport org.apache.http.ssl.SSLContextBuilder;\nimport org.apache.http.ssl.SSLContexts;\nimport org.apache.http.conn.ssl.SSLConnectionSocketFactory;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.apache.http.HttpResponse;\n\ndef request = exc?.request;\ndef response = exc?.response;\ndef method = request?.method;\nif(!response)\n{\n  request?.header?.removeFields(\"Accept-Encoding\");\n}\nelse\n{\n    def responseHeader = response?.header;\n    def body = response?.getBody();\n    def bodyStr = \"\";\n    if(body != null)\n        bodyStr = new String(body.getContent());\n    def accessToken = getClaimValue(bodyStr, \"access_token\");\n  \n    if(accessToken)\n    {            \n      bodyStr = bodyStr.replace(\"}\",\",\\\"\" + getClaim() + \"\\\":\\\"\" + getValue(accessToken) + \"\\\"}\");\n      response?.setBodyContent(bodyStr.getBytes(\"UTF-8\"));\n      responseHeader?.removeContentEncoding(); \n      // def bigIntContentLength = (bodyStr.getBytes(\"UTF-8\").length)/2;\n      // responseHeader?.setContentLength(bigIntContentLength);\n    }\n}\nanything();\n\nString getClaim()\n{\n    return \"patientId\";\n}\n\nString getValue(String accessToken)\n{\n    def sub = getAccessTokenClaim(accessToken, \"sub\");\n  \n    String username = \"cn=administrator\";\n    String password = \"2FederateM0re\";\n    \n    String encodedBasicAuth = Base64.getEncoder().encodeToString(String.format(\"%s:%s\", username, password).getBytes());\n    \n    String authHeader = \"Basic \" + encodedBasicAuth;\n    \n    String endpoint = \"https://pingdirectory:1443/consent/v1/consents?actor=\" + sub + \"&audience=AnyHealth\";\n  \n  \t// logger.info(\"Endpoint {}\", endpoint);\n    \n    String responseStr = getEndpointResponse(endpoint, \"GET\", authHeader);\n  \n  \t// logger.info(\"Response {}\", responseStr);\n    \n    if(responseStr == null)\n        return \"no-value\";\n    else\n        return getClaimValue(responseStr, \"_embedded.consents.subject\");\n}\nString getAccessTokenClaim(String accessToken, String claim)\n{\n    def accessTokenSplit = accessToken.split(\"\\\\.\");\n    def accessTokenBodyEncoded = accessTokenSplit[1];\n    def accessTokenBody = new String(Base64.getDecoder().decode(accessTokenBodyEncoded));\n  \n    return getClaimValue(accessTokenBody, claim);\n}\n\nString getEndpointResponse(String endpoint, String method, String authHeader) {\n  SSLContextBuilder sslCtx = new SSLContextBuilder();\n  SSLContext sslCtxBuild = sslCtx.build();\n  SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslCtxBuild);\n  HttpClient client = HttpClients.custom().setSSLSocketFactory(socketFactory).build();\n  HttpRequestBase request = new HttpGet(endpoint);\n  request.addHeader(\"Authorization\", authHeader);\n  HttpResponse response = client.execute(request);\n  if (response == null) {\n    return null;\n  }\n  BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n  StringBuffer result = new StringBuffer();\n  String line = \"\";\n  while ((line = rd.readLine()) != null) {\n    result.append(line);\n  }\n  return result.toString();\n}\n\nString getClaimValue(String responseStr, String jsonPath)\n    {\n        ObjectMapper mapper = new ObjectMapper();       \n        JsonNode resultObject = mapper.readTree(responseStr);\n      \n        logger.info(\"JSONObject: {}\", resultObject);\n        \n        String [] splitJsonPath = jsonPath.split(\"\\\\.\");\n        \n        for(String path : splitJsonPath)\n        {\n            resultObject = resultObject.findPath(path);\n          \tlogger.info(\"Claim: {}\", path);\n          \tlogger.info(\"Value: {}\", resultObject.textValue);\n          \n        }\n        \n        return resultObject.textValue();\n        \n    }"
                }
            }
        ],
        "sites": [
            {
                "id": 1,
                "name": "PingFed",
                "targets": [
                    "pingfederate:9031"
                ],
                "secure": true,
                "trustedCertificateGroupId": 2,
                "sendPaCookie": true,
                "useTargetHostHeader": false,
                "keepAliveTimeout": 0,
                "maxConnections": -1,
                "maxWebSocketConnections": -1,
                "siteAuthenticatorIds": [],
                "skipHostnameVerification": false,
                "expectedHostname": null,
                "availabilityProfileId": 1,
                "loadBalancingStrategyId": 0,
                "useProxy": false
            }
        ],
        "tokenProvider": {
            "useThirdParty": false,
            "type": "PingFederate"
        },
        "trustedCertGroups": [
            {
                "id": 3,
                "name": "docker",
                "useJavaTrustStore": true,
                "systemGroup": false,
                "ignoreAllCertificateErrors": false,
                "skipCertificateDateCheck": false,
                "certIds": [
                    1
                ]
            }
        ],
        "trustedCerts": [
            {
                "id": 1,
                "alias": "dev",
                "fileData": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUY4akNDQTlxZ0F3SUJBZ0lFZFlEZWt6QU5CZ2txaGtpRzl3MEJBUXNGQURCaE1Rc3dDUVlEVlFRR0V3SjFjekVMTUFrR0ExVUUNCkNCTUNZMjh4RHpBTkJnTlZCQWNUQm1SbGJuWmxjakVWTUJNR0ExVUVDaE1NY0dsdVoybGtaVzUwYVhSNU1ROHdEUVlEVlFRTEV3WmsNCmIyTnJaWEl4RERBS0JnTlZCQU1UQTJSbGRqQWVGdzB4T1RBMU1ERXlNRFE0TURGYUZ3MHlPVEEwTWpneU1EUTRNREZhTUdFeEN6QUoNCkJnTlZCQVlUQW5Wek1Rc3dDUVlEVlFRSUV3SmpiekVQTUEwR0ExVUVCeE1HWkdWdWRtVnlNUlV3RXdZRFZRUUtFd3h3YVc1bmFXUmwNCmJuUnBkSGt4RHpBTkJnTlZCQXNUQm1SdlkydGxjakVNTUFvR0ExVUVBeE1EWkdWMk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0MNCkFnOEFNSUlDQ2dLQ0FnRUFqT25kK2p1R3pPelMvQ3Q4cW1maDZIUnhaZjg1NnlSMzlDdnE4cVkyWGE5SzFTcW5MUGhLSTJ5QmhxU2kNCkFoQ01laHAvRHRQdEFJaXgvNUVVZmwvUWxuOU1Ka3dGTkt5QTVUQ090SHVBWE5maGhSY0p2VCs4TDZaM0VsOGduQWE1S1A5b1BtVzkNCnJ4L1h4VHFNdURlTkFobkhmSGlZbHRHV3NxdUxmNlp1WjFYVnB6dzZmVkc2VnFXcDZnU0lNMEV0K0tmRTFXM3lDcnpCM2o3QkNITEUNCnRXRkZ0R1ZWMHpxLzNkTnBQWUJsblc4S2t4L0J3eGE2QThmV0N4RXNWOTQ1RDNQNFZHZXlWaUxSSVZLWFA2NVM5Nnd4ZE9iTXFiMk4NCis4K0VKdERxNmlZYUplWDMrYStiOG9yOFJ0MHZIRm83YXkrV3NLSVljZWlDUW5wTEcwQkRJb1pYQnhNVnc5OVpjN0x2dGRmaGpBRlcNCmhCNU9nSUN3bnJOdWJEdHYwKzd3dGNJUTlVeWpKWGVsOG0yNkI5bDRUV1o2MjV6M0dhM25GUitnNk5nVG9iclpEWG8wcFdncVNEd3kNClN6b1BDcVZPc3pUV25XMGxwU1Ezd2Jmc2RDTDVhdXN4UTRJNHludjdqclBLdXlYVHF0ZFIrSUJqMTJ4UGtzL3hyQzd5b1pXZGNwY3UNCmRrYkR4U3REK1VCeUM4QlYvOFpzZm9LSU8rSFhKM2drc0dOYUhGQ2YyZVIyZXVVT3cycWJDRGYxYnJYOEk3RU1KdFNJajd4YnpqajQNCmxhYk9DSFpxeWthQWozb3lpWk1TeGYxZ1FHUTJjSjBzWHRURERuQTVkaHI4bTVGT3FBbnNFUzdrbDRDL1cxbjArWXdxc2YrLzREclUNCmhzdUo2OFAweEhXSDA2TUNBd0VBQWFPQnNUQ0JyakNCakFZRFZSMFJCSUdFTUlHQmdncHdhVzVuWVdOalpYTnpnZzl3YVc1blpHRjANCllXTnZibk52YkdXQ0VuQnBibWRrWVhSaFoyOTJaWEp1WVc1alpZSU1jR2x1WjJSaGRHRnplVzVqZ2cxd2FXNW5aR2x5WldOMGIzSjUNCmdneHdhVzVuWm1Wa1pYSmhkR1dDRW5CcGJtZG1aV1JsY21GMFpTMWhaRzFwYm9JSmJHOWpZV3hvYjNOMGh3Ui9BQUFCTUIwR0ExVWQNCkRnUVdCQlFKemdsZ1p5N05zOWlHcnZXRTdOOVZZcGdXQWpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQVpFempuWFlQalJJRjB2VDUNCnZYaGRQUlN5L3pMamZVQWVZSkZTWENuUUh1ODVkS0N0SExtekdXMjQ5aGd4c2VjQW03MS9UMHFoKzMvWlA0UTNwL2doU3dWOHlsK0wNCjNpMWpPZlFhdXZUV0JzZkMwZWtvTDR2UXhKSUl5MTJkSWMyaXd6QlJJTklKVGhpSVZnWlUyYk41anRkc0REeGNPQlNlMzFTeUVhT0sNCk5VZS9FRXpacEhFekdQMURONWozNFlhcGRCM201dWtRZmc3WVpPR01vSTZCMWZ6OU1wVk4ySU5GZzJ6cXROZEpWSFVmUjQzQ3FsOTYNCnpDangvQVZFejJPMUFMeVd3KzNMZXFGeWo1Q1pVL1pWaXpwWFRFM0d3VmRRVlFnVkZPcndIS29HODcvRDhaSUpvQmI5MW4zNlZ4RXENCnFWRVIzSXgvVi90eW1jQi8xUzJ4Si9Gc2tTQUdZUHhTZFZQZUZTUTUzdzZCZGhxb09JK3ZOYUl0eGlucld1d2NXQVh1TC8yWmxneU0NCmk0all5dDRQMjRqcTR1MExHK2RITWZ5bXlVNXoweFZpQzFKN2xkN0kzK1QzaUIvODJNMGN5UWtIMkY2Y0ptU3JnWjdwS1lDcFpXYnYNCjZ3R3ZGdzFnaUtHa1VERFhKT0E5NTBmSzY2cUZFSmdXb3RoV3J6SFRuZ1RMSHZZakpZOUZiMElocjRWb3VLOG1WdTBLYmxUY2x3eVoNCjYzSnF4QWRJdGpTb282VVVHMmZxaDh6UnU0U1ozS2l1WVRhdUN3VGRaZm5hOXozZWZPN0R4OWN3T1lsMUMvRGtNQTlQR3RMUzltL2oNCkQ4SU5CcUV2bEgwWDJNUE1ZL2ZYZ0RQWGVsVTlMSzhpK1pnYW9sOGdWR3d2U1QvR1Z0a25oZVJZVWgwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"
            },
            {
                "id": 3,
                "alias": "PingDirectory",
                "fileData": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNyRENDQVpRQ0NRQ2RvVk9sRThKMHJUQU5CZ2txaGtpRzl3MEJBUXNGQURBWU1SWXdGQVlEVlFRRERBMXdhVzVuWkdseVpXTjANCmIzSjVNQjRYRFRFNU1Ea3hPVEF3TURJME0xb1hEVEl3TURreE9EQXdNREkwTTFvd0dERVdNQlFHQTFVRUF3d05jR2x1WjJScGNtVmoNCmRHOXllVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMcEpzT2xYemtPVm9ITlVrVjJ0M1E1NjFwZWINCnV0UXo2NkQ1S3VrcGtEcUFjVXl2YnZ6SmQvclh4QzJLYkZMUzNlYTF1dWRRdjI5ZkFUR3grTFpHZUtSN1o3anEzWU9WWnRuV1B2SncNCmlJUkVVQVE0MUtyWjBicjVVdU1jVUJyS1VhbjlhSFdVU2xQdk1OSXdrR1NKV2huK2M1NGNGa0xpT0ZSR094SVFOR0toQXFQZG1HU0YNClJSVUI5aWd6K2hQWjdGaklZek5RVm1qYytyY0swSEwxYUd2RlJka2c5UUdqK2xiUE9zM2QxTFJQTFlQYmdPNkwwd2RlZ1M3b1hRQ3oNCk9XaXpHYUxYV2hBeUllK2doQTlpb3hHNE1KWXdJcmVDcDdrN1JnVUtVcGtFa0pIWlJQRnVKWEJTeW1hZDNvcENzQmJldE9uV2E3ZloNCmJaTy83OGVnUUZjQ0F3RUFBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBVTlkSHp2NHluWXdVNXJBUTBFM29IeXhac1gzMlhUbXMNCk1hRnJHUWVzaVdIKzhYV0N4dGZMRlh4VWtnSXlaaVdxdmZwVDFQMk83NnI4TlRZNHY0Z0xiRGM0SDYrbXFHNS9GWmszWHVxWGVDY1ENCjBXZVFhRWk1MzE2ekx6NEZMUUozc2IyZEpST0V1aTkzbGJmZXA0UUtJcnhadkhMODB1eG9lcHh6amU1Wm9aTlFSeG4xOVozb3FrN0ENCnZmTTZDNjM1OWNWVEZINllDL2pZTDArZy9nMTA3VXNLZnVMMUcrMkFtSVFpRUpuQmdxMkdkMXpnQUxBdWRha2Fuam40ZndCamR5RVgNClJ1ak80NDE5bkpUK2hSNWVvVTBNUjVTYng2Z0cyRFY2QlZBYlJIL210aS9xN2RSNVlQZFI3VW95Z2M3dHpSL3dFMWJESW1PNTVGWjgNCkRjRGU3dz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
            }
        ],
        "unknownResources": {
            "errorStatusCode": 403,
            "errorTemplateFile": "general.error.page.template.html",
            "errorContentType": "HTML",
            "agentDefaultMode": "DENY",
            "agentDefaultCacheTTL": 900,
            "auditLevel": "OFF"
        },
        "virtualHosts": [
            {
                "id": 3,
                "host": "*",
                "port": 443,
                "agentResourceCacheTTL": 900,
                "keyPairId": 0,
                "trustedCertificateGroupId": 0
            }
        ],
        "webSessionMgmt": {
            "keyRollEnabled": true,
            "keyRollPeriodInHours": 24,
            "issuer": "PingAccess",
            "signingAlgorithm": "P-256",
            "cookieName": "PA",
            "sessionStateCookieName": "PA_STATE",
            "updateTokenWindowInSeconds": 60,
            "encryptionAlgorithm": "A128CBC-HS256",
            "nonceCookieTimeToLiveInMinutes": 5
        }
    }
}